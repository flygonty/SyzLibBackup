# Copyright 2017 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

# AF_NETLINK/NETLINK_NETFILTER support.

include <linux/net.h>
include <uapi/linux/netlink.h>
include <uapi/linux/netfilter.h>
include <uapi/linux/netfilter/nfnetlink.h>
include <libnftnl/table.h>

resource sock_nl_netfilter[sock_netlink]

socket$nl_netfilter(domain const[AF_NETLINK], type const[SOCK_RAW], proto const[NETLINK_NETFILTER]) sock_nl_netfilter

sendmsg$nl_netfilter(fd sock_nl_netfilter, msg ptr[in, msghdr_nl_netfilter], f flags[send_flags])

# nftnl_table_flags = NFTNL_TABLE_NAME, NFTNL_TABLE_FAMILY, NFTNL_TABLE_FLAGS, NFTNL_TABLE_USE, NFTNL_TABLE_HANDLE, NFTNL_TABLE_USERDATA, NFTNL_TABLE_OWNER, __NFTNL_TABLE_MAX
nftnl_new_table = NFT_MSG_NEWTABLE
nftnl_create_tag = 1028
family = NFPROTO_INET

resource mnl_sock[int32]
resource mnl_nlmsg_batch[int32]
#resource mnl_nlmsg_batch_void_ptr[int32]
# batch_next, batch_head
resource nftnl_table[int32]
resource nftnl_set[int32]
resource nlmsghdr[int32]
resource nftnl_expr[int32]
resource nftnl_chain[int32]
resource nftnl_set_elem[int32]
resource nftnl_rule[int32]

syz_mnl_socket_open(bus int32) mnl_sock
syz_mnl_socket_close(sock mnl_sock)
syz_mnl_socket_sendto(sock mnl_sock, buf_ptr int32, len int32)
syz_mnl_nlmsg_batch_start(buf_ptr int32, limit int32) mnl_nlmsg_batch
syz_mnl_nlmsg_batch_current(b mnl_nlmsg_batch) mnl_nlmsg_batch
syz_mnl_nlmsg_batch_next(b mnl_nlmsg_batch)
syz_mnl_nlmsg_batch_head(b mnl_nlmsg_batch)
syz_mnl_nlmsg_batch_size(b mnl_nlmsg_batch)
syz_nftnl_table_alloc() nftnl_table
syz_nftnl_table_free(t nftnl_table)
syz_nftnl_table_set_str(t nftnl_table, attr int16, str int32)
syz_nftnl_table_set_u32(t nftnl_table, attr int16, val int32)
syz_nftnl_table_nlmsg_build_hdr(b mnl_nlmsg_batch, type flags[nftnl_new_table], f flags[family], seq flags[nftnl_create_tag], res_id int16)
syz_nftnl_set_alloc() nftnl_set
syz_nftnl_set_set_str(s nftnl_set, addr int32, str int32)
syz_nftnl_set_set_u32(s nftnl_set, addr int32, val int32)
syz_nftnl_batch_begin(buf_ptr int32, seq int32) nlmsghdr
syz_nftnl_table_nlmsg_build_payload(nlh nlmsghdr, t nftnl_table)
syz_nftnl_set_nlmsg_build_payload(nlh nlmsghdr, s nftnl_set)
syz_nftnl_set_set_data(s nftnl_set, attr int16, data_ptr int32, len int32)
syz_nftnl_set_free(s nftnl_set)
syz_nftnl_batch_end(buf_ptr int32, seq int32) nlmsghdr
syz_nftnl_expr_alloc(name int32) nftnl_expr
syz_nftnl_expr_set_str(e nftnl_expr, type int32, str int32)
syz_nftnl_expr_set_u32(e nftnl_expr, type int32, data int32)
syz_mnl_socket_get_fd(sock mnl_sock) fd
syz_mnl_socket_get_portid(sock mnl_sock)
syz_mnl_socket_fdopen(f fd)
syz_mnl_socket_bind(sock mnl_sock, groups int32, pid int32)
syz_mnl_socket_recvfrom(sock mnl_sock, buf_ptr int32, buf_size int32)
syz_mnl_socket_getsockopt(sock mnl_sock, type int32, buf_ptr int32, len int32)
syz_nftnl_chain_alloc() nftnl_chain
syz_nftnl_chain_free(c nftnl_chain)
syz_nftnl_chain_set_data(c nftnl_chain, attr int32, data_ptr int32)
syz_nftnl_chain_set_u32(c nftnl_chain, attr int16, data_ptr int32)
syz_nftnl_chain_set_str(c nftnl_chain, attr int16, str_ptr int32)
syz_nftnl_expr_free(e nftnl_expr)
syz_nftnl_expr_set(e nftnl_expr, type int32, data_ptr int32, data_len int32)

syz_nftnl_set_elem_alloc() nftnl_set_elem
syz_nftnl_set_elem_free(set_e nftnl_set_elem)
syz_nftnl_set_elem_set(set_e nftnl_set_elem, attr int16, data_ptr int32, data_len int32)
syz_nftnl_set_elem_add(set_e nftnl_set_elem, e nftnl_expr)
syz_nftnl_set_elems_nlmsg_build_payload(nlh nlmsghdr, set_e nftnl_set_elem)

syz_nftnl_rule_alloc() nftnl_rule
syz_nftnl_rule_free(r nftnl_rule)
syz_nftnl_rule_set_u32(r nftnl_rule, attr int16, val int32)
syz_nftnl_rule_set_str(r nftnl_rule, attr int16, str_ptr int32)
syz_nftnl_rule_nlmsg_build_payload(nlh nlmsghdr, rule nftnl_rule)

syz_mnl_cb_run(buf_ptr int32, numbytes int32, seq int32, portid int32, cb_data_ptr int32, data_ptr int32)

type msghdr_nl_netfilter msghdr_netlink[netlink_msg_netfilter]

netlink_msg_netfilter {
	len	len[parent, int32]
	type	int8[0:20]
	subsys	flags[nfnl_subsys, int8]
	flags	flags[netlink_netfilter_msg_flags, int16]
	seq	netlink_seq
	pid	netlink_port_id
	hdr	nfgenmsg
# No body. Generic attribute can represent a random body.
	attrs	array[nl_generic_attr]
} [align[4]]

type netlink_msg_netfilter_t[SUBSYS, CMD, POLICY] netlink_msg_netfilter_tt[SUBSYS, CMD, array[POLICY]]

type netlink_msg_netfilter_tt[SUBSYS, CMD, POLICY] {
	len	len[parent, int32]
	type	const[CMD, int8]
	subsys	const[SUBSYS, int8]
	flags	flags[netlink_netfilter_msg_flags, int16]
	seq	const[0, int32]
	pid	const[0, int32]
	hdr	nfgenmsg
	attrs	POLICY
} [align[4]]

nfgenmsg {
	nfgen_family	flags[nfproto, int8]
	version		const[NFNETLINK_V0, int8]
# res_id seems to mean things like cpu/queue/group number, so prefer small values.
	res_id		int16be[0:10]
} [align[4]]

nfnl_subsys = NFNL_SUBSYS_CTNETLINK, NFNL_SUBSYS_CTNETLINK_EXP, NFNL_SUBSYS_QUEUE, NFNL_SUBSYS_ULOG, NFNL_SUBSYS_OSF, NFNL_SUBSYS_IPSET, NFNL_SUBSYS_ACCT, NFNL_SUBSYS_CTNETLINK_TIMEOUT, NFNL_SUBSYS_CTHELPER, NFNL_SUBSYS_NFTABLES, NFNL_SUBSYS_NFT_COMPAT
nfproto = NFPROTO_UNSPEC, NFPROTO_INET, NFPROTO_IPV4, NFPROTO_ARP, NFPROTO_NETDEV, NFPROTO_BRIDGE, NFPROTO_IPV6

# We always need to send NLM_F_REQUEST and some netlink flags are not used.
netlink_netfilter_msg_flags = NLM_F_ACK_REQUEST, NLM_F_APPEND_REQUEST, NLM_F_CREATE_REQUEST, NLM_F_DUMP_REQUEST, NLM_F_EXCL_REQUEST, NLM_F_EXCL_REQUEST, NLM_F_MULTI_REQUEST, NLM_F_NONREC_REQUEST, NLM_F_REPLACE_REQUEST

define NLM_F_ACK_REQUEST	NLM_F_ACK | NLM_F_REQUEST
define NLM_F_APPEND_REQUEST	NLM_F_APPEND | NLM_F_REQUEST
define NLM_F_CREATE_REQUEST	NLM_F_CREATE | NLM_F_REQUEST
define NLM_F_DUMP_REQUEST	NLM_F_DUMP | NLM_F_REQUEST
define NLM_F_EXCL_REQUEST	NLM_F_EXCL | NLM_F_REQUEST
define NLM_F_MULTI_REQUEST	NLM_F_MULTI | NLM_F_REQUEST
define NLM_F_NONREC_REQUEST	NLM_F_NONREC | NLM_F_REQUEST
define NLM_F_REPLACE_REQUEST	NLM_F_REPLACE | NLM_F_REQUEST
